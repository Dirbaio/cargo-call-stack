file = { SOI ~ ( item ~ "\n"*  )* ~ EOI }

item = {
  comment |
  source_filename |
  target_datalayout |
  target_triple |
  type_alias |
  global |
  constant |
  define |
  declare |
  attributes |
  bang_llvm |
  metadata_alias
}

source_filename = { "source_filename = " ~ (!"\n" ~ ANY)+ }
target_datalayout = { "target datalayout = " ~ (!"\n" ~ ANY)+ }
target_triple = { "target triple = " ~ (!"\n" ~ ANY)+ }

keyword = { (ASCII_ALPHA | "_")+ }

type_alias = { "%" ~ (!"=" ~ ANY)+ ~ "=" ~ (!"\n" ~ ANY)+ }

global = { "@" ~ (!"=" ~ ANY)+ ~ "= " ~ (!"global" ~ keyword ~ " ")* ~ "global" ~ (!"\n" ~ ANY)+ }
constant = { "@" ~ (!"=" ~ ANY)+ ~ "= " ~ (!"constant" ~ keyword ~ " ")+ ~ "constant" ~ (!"\n" ~ ANY)+ }

attributes = { "attributes #" ~ (!"\n" ~ ANY)+ }

bang_llvm = { "!llvm." ~ (!"\n" ~ ANY)+ }

metadata_alias = { metadata_alias_string | metadata_alias_wildcard }

// we are only interested in this case (e.g. `!337 = !{!"const Trait::m"}`)
metadata_alias_string = { metadata_number ~ " = !{!" ~ string ~ "}" }
metadata_alias_wildcard = { "!" ~ (ASCII_DIGIT)+ ~ " = " ~ (!"\n" ~ ANY)+ }

symbol = { "@" ~ ( (ASCII_ALPHANUMERIC | "_" | ".")+ | ( "\"" ~ (!"\"" ~ ANY)+ ~ "\"" ) ) }
metadata = { metadata_identifier ~ " " ~ metadata_number }
metadata_identifier = { "!" ~ ASCII_ALPHA+ }
metadata_number = { "!" ~ ASCII_DIGIT+ }

declare = {
  "declare" ~
  (!"@" ~ ANY)+ ~ // e.g. "void"
  symbol ~ // e.g. "@_ZblahblahE"
  (!"\n" ~ ANY)+ // e.g. "#0" (attribute)
}

define = {
  "define" ~
  (!"@" ~ ANY)+ ~ // e.g. "void"
  symbol ~ // e.g. "@_ZblahblahE"
  "(" ~ (!")" ~ ANY)* ~ ")" ~ // e.g. "({ [0 x i32])" - FIXME: this doesn't properly handle nested parentheses
  (!"{" ~ ANY)+ ~ // e.g. "#0" (attribute)
  "{\n" ~
    ((label | instruction | comment) ~ "\n"+)+ ~
  "}"
}

label = {
  (
    ( "\"" ~ (!"\"" ~ ANY)+ ~ "\"" ) |
    (ASCII_ALPHANUMERIC | "." | "_")+
  ) ~ ":" ~
  (" "+ ~ comment)?
}
instruction = { "  " ~ (insn_assign | maybe_call) }

insn_assign = { "%" ~ (!"=" ~ ANY)+ ~ "= " ~ maybe_call }

wildcard = { (!"\n" ~ ANY)+ }
maybe_call = { call_asm | call_direct | call_indirect | wildcard }

string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

call_asm = {
  (!"call" ~ ASCII_ALPHA+ ~ " ")* ~ // e.g. "tail"
  "call" ~ " " ~
  (!"asm" ~ ASCII_ALPHANUMERIC+ ~ " ")+ ~ // e.g. "void" or "i32"
  "asm" ~
  (!"\"" ~ ANY)+ ~ // e.g. "sideeffect"
  string ~
  (!"\n" ~ ANY)+
}

call_direct = {
  (!"call" ~ ASCII_ALPHA+ ~ " ")* ~ // e.g. "tail"
  "call" ~ " " ~
  (ASCII_ALPHANUMERIC+ ~ " ")+ ~ // e.g. "void" or "i1"
  symbol ~ // e.g. "@_ZblahblahE"
  (!"\n" ~ ANY)+
}

call_indirect = {
  (!"call" ~ ASCII_ALPHA+ ~ " ")* ~ // e.g. "tail"
  "call" ~ " " ~
  (!"%" ~ ANY)+ ~ // e.g. "void" or "i32
  "%" ~ (!")"  ~ ANY)+ ~ ")" ~ // e.g. "%3({}* nonnull %0, i32 42)"
  (!"\n" ~ !"!" ~ ANY)+ ~ // e.g. "#0"
  (metadata ~ ", "?)*
}

comment = { ";" ~ (!"\n" ~ ANY)+ }